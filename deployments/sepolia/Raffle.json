{
  "address": "0x832d99d841f7F1c5a525A41a696558229721fAea",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__FailedToRewardWinner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotSentEnoughEntranceFee",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playersLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "PickedWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reqId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2384ce0afd1e08f0a861c4a4bea46e4cf5df0e7c6c3531047c7d4cbd6f77fa67",
  "receipt": {
    "to": null,
    "from": "0x545c4599FFE3fe073Ae775E47d003F8039e182D8",
    "contractAddress": "0x832d99d841f7F1c5a525A41a696558229721fAea",
    "transactionIndex": 54,
    "gasUsed": "1191383",
    "logsBloom": "0x
    "blockHash": "0x3a0c9f0e1bbf5a23f9a4b02fa2a82555e5ce994fd2b09b0dbc72838dca3e2c9d",
    "transactionHash": "0x2384ce0afd1e08f0a861c4a4bea46e4cf5df0e7c6c3531047c7d4cbd6f77fa67",
    "logs": [],
    "blockNumber": 3293649,
    "cumulativeGasUsed": "16117386",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "790",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "0104b83b0ae3c61af71add75d40041be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__FailedToRewardWinner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotSentEnoughEntranceFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playersLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"PickedWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reqId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kalio753\",\"details\":\"Implement Chainlink VRF & Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is fuction of Chainlink Keeper to check when to reload scripts When to update : 1. It's time (check time pass if greater than interval passed in) 2. Have at least 1 player & some ETH in the Lottery 3. Subscription should have some LINK (The service online) 4. The state of lotter should be 'open'\"}},\"title\":\"Auto Random Raffle Smart Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract create a automatic random decetralized lottery for players to join\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"/* Function TODO:  \\r\\n  _Participate to the lottery pool\\r\\n  _Pick a random winner from the pool\\r\\n  _Winner to be selected automatically after X times\\r\\n  _Randomness (Chainlink Oracle) ; Automated Execution (Chainlink Keeper)\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\n\\r\\nerror Raffle__NotSentEnoughEntranceFee();\\r\\nerror Raffle__NotOpen();\\r\\nerror Raffle__FailedToRewardWinner();\\r\\nerror Raffle__UpkeepNotNeeded(\\r\\n    uint256 currBalance,\\r\\n    uint256 playersLength,\\r\\n    uint256 raffleState\\r\\n);\\r\\n\\r\\n/**\\r\\n * @title Auto Random Raffle Smart Contract\\r\\n * @author Kalio753\\r\\n * @notice This contract create a automatic random decetralized lottery for players to join\\r\\n * @dev Implement Chainlink VRF & Chainlink Keepers\\r\\n */\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\r\\n    // Type\\r\\n    enum RaffleState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n    // This will assign OPEN as 0; CALCULATING as 1\\r\\n\\r\\n    // State variables\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    address payable[] private s_players;\\r\\n\\r\\n    //      Lottery variables\\r\\n    address private s_recentWinner;\\r\\n    RaffleState private s_raffleState;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n    uint256 private immutable i_interval;\\r\\n\\r\\n    //      VRF variables\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n\\r\\n    // Events\\r\\n    event RaffleEnter(address indexed player);\\r\\n    event RequestedRaffleWinner(uint256 indexed reqId);\\r\\n    event PickedWinner(address indexed winner);\\r\\n\\r\\n    // Functions\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2,\\r\\n        uint256 entranceFee,\\r\\n        bytes32 gasLane,\\r\\n        uint64 subscriptionId,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint256 interval\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_entranceFee = entranceFee;\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        s_raffleState = RaffleState.OPEN; // RaffleState.OPEN == RaffleState(0)\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_interval = interval;\\r\\n    }\\r\\n\\r\\n    function enterRaffle() public payable {\\r\\n        if (msg.value < i_entranceFee) {\\r\\n            revert Raffle__NotSentEnoughEntranceFee();\\r\\n        }\\r\\n\\r\\n        if (s_raffleState != RaffleState.OPEN) {\\r\\n            revert Raffle__NotOpen();\\r\\n        }\\r\\n\\r\\n        s_players.push(payable(msg.sender));\\r\\n        emit RaffleEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This is fuction of Chainlink Keeper to check when to reload scripts\\r\\n     * When to update :\\r\\n     * 1. It's time (check time pass if greater than interval passed in)\\r\\n     * 2. Have at least 1 player & some ETH in the Lottery\\r\\n     * 3. Subscription should have some LINK (The service online)\\r\\n     * 4. The state of lotter should be 'open'\\r\\n     */\\r\\n    function checkUpkeep(\\r\\n        bytes memory /* checkData */\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\r\\n    {\\r\\n        bool isTimePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\r\\n        bool hasPlayers = s_players.length > 0;\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        bool isOpen = s_raffleState == RaffleState.OPEN;\\r\\n\\r\\n        upkeepNeeded = isTimePassed && hasPlayers && hasBalance && isOpen;\\r\\n        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /* performData */) external override {\\r\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n\\r\\n        if (!upkeepNeeded) {\\r\\n            revert Raffle__UpkeepNotNeeded(\\r\\n                address(this).balance,\\r\\n                s_players.length,\\r\\n                uint256(s_raffleState)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        s_raffleState = RaffleState.CALCULATING;\\r\\n        uint256 reqId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane, // gas lane (total WEI to consume base on different network)\\r\\n            i_subscriptionId, // contract on chain which handle the calculation for the randomness\\r\\n            REQUEST_CONFIRMATIONS, // How many blocks u want to wait on Chainlink node to response\\r\\n            i_callbackGasLimit, // How much gas until it revert\\r\\n            NUM_WORDS // How many random numbers you want to take\\r\\n        );\\r\\n\\r\\n        emit RequestedRaffleWinner(reqId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 requestId,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override {\\r\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\r\\n        address payable winner = s_players[indexOfWinner];\\r\\n        s_recentWinner = winner;\\r\\n        (bool success, ) = winner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert Raffle__FailedToRewardWinner();\\r\\n        }\\r\\n        emit PickedWinner(winner);\\r\\n\\r\\n        // Reset lottery\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_players = new address payable[](0);\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    // Pure / view functions\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n    function getRaffleState() public view returns (RaffleState) {\\r\\n        return s_raffleState;\\r\\n    }\\r\\n\\r\\n    // If not reading data from the storage, we can use pure\\r\\n    function getNumWords() public pure returns (uint256) {\\r\\n        return NUM_WORDS;\\r\\n    }\\r\\n\\r\\n    function getNumberOfPlayers() public view returns (uint256) {\\r\\n        return s_players.length;\\r\\n    }\\r\\n\\r\\n    function getLatestTimeStamp() public view returns (uint256) {\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2e83aa46b9beac92f25a63499b425384c0023e42c40fb7ba1e2e6f0f82304af6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620017de380380620017de8339818101604052810190620000389190620002a0565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508573ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508460a081815250508361010081815250508267ffffffffffffffff166101208167ffffffffffffffff1660c01b815250508163ffffffff166101408163ffffffff1660e01b815250506000600160146101000a81548160ff021916908360018111156200011a57620001196200033c565b5b0217905550426002819055508060c081815250505050505050506200036b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016c826200013f565b9050919050565b6200017e816200015f565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b6000819050919050565b620001b981620001a4565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b6000819050919050565b620001f481620001df565b81146200020057600080fd5b50565b6000815190506200021481620001e9565b92915050565b600067ffffffffffffffff82169050919050565b62000239816200021a565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a016200018d565b9650506020620002e389828a01620001c8565b9550506040620002f689828a0162000203565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000289565b92505060a06200032f89828a01620001c8565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160e05160601c610100516101205160c01c6101405160e01c6113f7620003e7600039600061065f0152600061063c0152600061061b015260006105df01526000818161076801526108100152600081816102b401526103b10152600081816102f1015261034501526113f76000f3fe6080604052600436106100a75760003560e01c8063473f1ddc11610064578063473f1ddc1461018957806353a2c19a146101b45780636e04ff0d146101df57806391ad27b41461021d578063e55ae4e814610248578063fd6673f514610285576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b578063320229eb146101355780634585e33b14610160575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610b78565b60405180910390f35b3480156100e357600080fd5b506100ec6102d8565b6040516100f99190610c0a565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610dbe565b6102ef565b005b6101336103af565b005b34801561014157600080fd5b5061014a61051e565b6040516101579190610b78565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190610e75565b610528565b005b34801561019557600080fd5b5061019e610727565b6040516101ab9190610f03565b60405180910390f35b3480156101c057600080fd5b506101c9610751565b6040516101d69190610b78565b60405180910390f35b3480156101eb57600080fd5b5061020660048036038101906102019190610fd3565b610760565b6040516102149291906110bf565b60405180910390f35b34801561022957600080fd5b5061023261080c565b60405161023f9190610b78565b60405180910390f35b34801561025457600080fd5b5061026f600480360381019061026a91906110ef565b610834565b60405161027c9190610f03565b60405180910390f35b34801561029157600080fd5b5061029a61087b565b6040516102a79190610b78565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161039892919061111c565b60405180910390fd5b6103ab8282610887565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610409576040517fcd89546f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561041d5761041c610b93565b5b600160149054906101000a900460ff16600181111561043f5761043e610b93565b5b14610476576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b600061054260405180602001604052806000815250610760565b509050806105b15747600080549050600160149054906101000a900460ff16600181111561057357610572610b93565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105a893929190611145565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105d6576105d5610b93565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106a09594939291906111f4565b602060405180830381600087803b1580156106ba57600080fd5b505af11580156106ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f2919061125c565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000606060007f00000000000000000000000000000000000000000000000000000000000000006002544261079591906112b8565b1190506000806000805490501190506000804711905060008060018111156107c0576107bf610b93565b5b600160149054906101000a900460ff1660018111156107e2576107e1610b93565b5b1490508380156107ef5750825b80156107f85750815b80156108015750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000808281548110610849576108486112ec565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108a2576108a16112ec565b5b60200260200101516108b4919061134a565b905060008082815481106108cb576108ca6112ec565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff164760405161095f906113ac565b60006040518083038185875af1925050503d806000811461099c576040519150601f19603f3d011682016040523d82523d6000602084013e6109a1565b606091505b50509050806109dc576040517fe3f4b3c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fb112587e57bfa970257f3d54fc52859c6300f6bd7a982462c320fed45c2530ed60405160405180910390a26000600160146101000a81548160ff02191690836001811115610a4557610a44610b93565b5b0217905550600067ffffffffffffffff811115610a6557610a64610c7b565b5b604051908082528060200260200182016040528015610a935781602001602082028036833780820191505090505b5060009080519060200190610aa9929190610ab8565b50426002819055505050505050565b828054828255906000526020600020908101928215610b31579160200282015b82811115610b305782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ad8565b5b509050610b3e9190610b42565b5090565b5b80821115610b5b576000816000905550600101610b43565b5090565b6000819050919050565b610b7281610b5f565b82525050565b6000602082019050610b8d6000830184610b69565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610bd357610bd2610b93565b5b50565b6000819050610be482610bc2565b919050565b6000610bf482610bd6565b9050919050565b610c0481610be9565b82525050565b6000602082019050610c1f6000830184610bfb565b92915050565b6000604051905090565b600080fd5b600080fd5b610c4281610b5f565b8114610c4d57600080fd5b50565b600081359050610c5f81610c39565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cb382610c6a565b810181811067ffffffffffffffff82111715610cd257610cd1610c7b565b5b80604052505050565b6000610ce5610c25565b9050610cf18282610caa565b919050565b600067ffffffffffffffff821115610d1157610d10610c7b565b5b602082029050602081019050919050565b600080fd5b6000610d3a610d3584610cf6565b610cdb565b90508083825260208201905060208402830185811115610d5d57610d5c610d22565b5b835b81811015610d865780610d728882610c50565b845260208401935050602081019050610d5f565b5050509392505050565b600082601f830112610da557610da4610c65565b5b8135610db5848260208601610d27565b91505092915050565b60008060408385031215610dd557610dd4610c2f565b5b6000610de385828601610c50565b925050602083013567ffffffffffffffff811115610e0457610e03610c34565b5b610e1085828601610d90565b9150509250929050565b600080fd5b60008083601f840112610e3557610e34610c65565b5b8235905067ffffffffffffffff811115610e5257610e51610e1a565b5b602083019150836001820283011115610e6e57610e6d610d22565b5b9250929050565b60008060208385031215610e8c57610e8b610c2f565b5b600083013567ffffffffffffffff811115610eaa57610ea9610c34565b5b610eb685828601610e1f565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eed82610ec2565b9050919050565b610efd81610ee2565b82525050565b6000602082019050610f186000830184610ef4565b92915050565b600080fd5b600067ffffffffffffffff821115610f3e57610f3d610c7b565b5b610f4782610c6a565b9050602081019050919050565b82818337600083830152505050565b6000610f76610f7184610f23565b610cdb565b905082815260208101848484011115610f9257610f91610f1e565b5b610f9d848285610f54565b509392505050565b600082601f830112610fba57610fb9610c65565b5b8135610fca848260208601610f63565b91505092915050565b600060208284031215610fe957610fe8610c2f565b5b600082013567ffffffffffffffff81111561100757611006610c34565b5b61101384828501610fa5565b91505092915050565b60008115159050919050565b6110318161101c565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611071578082015181840152602081019050611056565b83811115611080576000848401525b50505050565b600061109182611037565b61109b8185611042565b93506110ab818560208601611053565b6110b481610c6a565b840191505092915050565b60006040820190506110d46000830185611028565b81810360208301526110e68184611086565b90509392505050565b60006020828403121561110557611104610c2f565b5b600061111384828501610c50565b91505092915050565b60006040820190506111316000830185610ef4565b61113e6020830184610ef4565b9392505050565b600060608201905061115a6000830186610b69565b6111676020830185610b69565b6111746040830184610b69565b949350505050565b6000819050919050565b61118f8161117c565b82525050565b600067ffffffffffffffff82169050919050565b6111b281611195565b82525050565b600061ffff82169050919050565b6111cf816111b8565b82525050565b600063ffffffff82169050919050565b6111ee816111d5565b82525050565b600060a0820190506112096000830188611186565b61121660208301876111a9565b61122360408301866111c6565b61123060608301856111e5565b61123d60808301846111e5565b9695505050505050565b60008151905061125681610c39565b92915050565b60006020828403121561127257611271610c2f565b5b600061128084828501611247565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112c382610b5f565b91506112ce83610b5f565b9250828210156112e1576112e0611289565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061135582610b5f565b915061136083610b5f565b9250826113705761136f61131b565b5b828206905092915050565b600081905092915050565b50565b600061139660008361137b565b91506113a182611386565b600082019050919050565b60006113b782611389565b915081905091905056fea2646970667358221220d5c3018d20e355e6e7fbbd120f1b44f1ffdc16418f5b3b84450fdb70352d473a64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063473f1ddc11610064578063473f1ddc1461018957806353a2c19a146101b45780636e04ff0d146101df57806391ad27b41461021d578063e55ae4e814610248578063fd6673f514610285576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b578063320229eb146101355780634585e33b14610160575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610b78565b60405180910390f35b3480156100e357600080fd5b506100ec6102d8565b6040516100f99190610c0a565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610dbe565b6102ef565b005b6101336103af565b005b34801561014157600080fd5b5061014a61051e565b6040516101579190610b78565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190610e75565b610528565b005b34801561019557600080fd5b5061019e610727565b6040516101ab9190610f03565b60405180910390f35b3480156101c057600080fd5b506101c9610751565b6040516101d69190610b78565b60405180910390f35b3480156101eb57600080fd5b5061020660048036038101906102019190610fd3565b610760565b6040516102149291906110bf565b60405180910390f35b34801561022957600080fd5b5061023261080c565b60405161023f9190610b78565b60405180910390f35b34801561025457600080fd5b5061026f600480360381019061026a91906110ef565b610834565b60405161027c9190610f03565b60405180910390f35b34801561029157600080fd5b5061029a61087b565b6040516102a79190610b78565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161039892919061111c565b60405180910390fd5b6103ab8282610887565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610409576040517fcd89546f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561041d5761041c610b93565b5b600160149054906101000a900460ff16600181111561043f5761043e610b93565b5b14610476576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b600061054260405180602001604052806000815250610760565b509050806105b15747600080549050600160149054906101000a900460ff16600181111561057357610572610b93565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105a893929190611145565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105d6576105d5610b93565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106a09594939291906111f4565b602060405180830381600087803b1580156106ba57600080fd5b505af11580156106ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f2919061125c565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000606060007f00000000000000000000000000000000000000000000000000000000000000006002544261079591906112b8565b1190506000806000805490501190506000804711905060008060018111156107c0576107bf610b93565b5b600160149054906101000a900460ff1660018111156107e2576107e1610b93565b5b1490508380156107ef5750825b80156107f85750815b80156108015750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000808281548110610849576108486112ec565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108a2576108a16112ec565b5b60200260200101516108b4919061134a565b905060008082815481106108cb576108ca6112ec565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff164760405161095f906113ac565b60006040518083038185875af1925050503d806000811461099c576040519150601f19603f3d011682016040523d82523d6000602084013e6109a1565b606091505b50509050806109dc576040517fe3f4b3c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fb112587e57bfa970257f3d54fc52859c6300f6bd7a982462c320fed45c2530ed60405160405180910390a26000600160146101000a81548160ff02191690836001811115610a4557610a44610b93565b5b0217905550600067ffffffffffffffff811115610a6557610a64610c7b565b5b604051908082528060200260200182016040528015610a935781602001602082028036833780820191505090505b5060009080519060200190610aa9929190610ab8565b50426002819055505050505050565b828054828255906000526020600020908101928215610b31579160200282015b82811115610b305782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ad8565b5b509050610b3e9190610b42565b5090565b5b80821115610b5b576000816000905550600101610b43565b5090565b6000819050919050565b610b7281610b5f565b82525050565b6000602082019050610b8d6000830184610b69565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610bd357610bd2610b93565b5b50565b6000819050610be482610bc2565b919050565b6000610bf482610bd6565b9050919050565b610c0481610be9565b82525050565b6000602082019050610c1f6000830184610bfb565b92915050565b6000604051905090565b600080fd5b600080fd5b610c4281610b5f565b8114610c4d57600080fd5b50565b600081359050610c5f81610c39565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cb382610c6a565b810181811067ffffffffffffffff82111715610cd257610cd1610c7b565b5b80604052505050565b6000610ce5610c25565b9050610cf18282610caa565b919050565b600067ffffffffffffffff821115610d1157610d10610c7b565b5b602082029050602081019050919050565b600080fd5b6000610d3a610d3584610cf6565b610cdb565b90508083825260208201905060208402830185811115610d5d57610d5c610d22565b5b835b81811015610d865780610d728882610c50565b845260208401935050602081019050610d5f565b5050509392505050565b600082601f830112610da557610da4610c65565b5b8135610db5848260208601610d27565b91505092915050565b60008060408385031215610dd557610dd4610c2f565b5b6000610de385828601610c50565b925050602083013567ffffffffffffffff811115610e0457610e03610c34565b5b610e1085828601610d90565b9150509250929050565b600080fd5b60008083601f840112610e3557610e34610c65565b5b8235905067ffffffffffffffff811115610e5257610e51610e1a565b5b602083019150836001820283011115610e6e57610e6d610d22565b5b9250929050565b60008060208385031215610e8c57610e8b610c2f565b5b600083013567ffffffffffffffff811115610eaa57610ea9610c34565b5b610eb685828601610e1f565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eed82610ec2565b9050919050565b610efd81610ee2565b82525050565b6000602082019050610f186000830184610ef4565b92915050565b600080fd5b600067ffffffffffffffff821115610f3e57610f3d610c7b565b5b610f4782610c6a565b9050602081019050919050565b82818337600083830152505050565b6000610f76610f7184610f23565b610cdb565b905082815260208101848484011115610f9257610f91610f1e565b5b610f9d848285610f54565b509392505050565b600082601f830112610fba57610fb9610c65565b5b8135610fca848260208601610f63565b91505092915050565b600060208284031215610fe957610fe8610c2f565b5b600082013567ffffffffffffffff81111561100757611006610c34565b5b61101384828501610fa5565b91505092915050565b60008115159050919050565b6110318161101c565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611071578082015181840152602081019050611056565b83811115611080576000848401525b50505050565b600061109182611037565b61109b8185611042565b93506110ab818560208601611053565b6110b481610c6a565b840191505092915050565b60006040820190506110d46000830185611028565b81810360208301526110e68184611086565b90509392505050565b60006020828403121561110557611104610c2f565b5b600061111384828501610c50565b91505092915050565b60006040820190506111316000830185610ef4565b61113e6020830184610ef4565b9392505050565b600060608201905061115a6000830186610b69565b6111676020830185610b69565b6111746040830184610b69565b949350505050565b6000819050919050565b61118f8161117c565b82525050565b600067ffffffffffffffff82169050919050565b6111b281611195565b82525050565b600061ffff82169050919050565b6111cf816111b8565b82525050565b600063ffffffff82169050919050565b6111ee816111d5565b82525050565b600060a0820190506112096000830188611186565b61121660208301876111a9565b61122360408301866111c6565b61123060608301856111e5565b61123d60808301846111e5565b9695505050505050565b60008151905061125681610c39565b92915050565b60006020828403121561127257611271610c2f565b5b600061128084828501611247565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112c382610b5f565b91506112ce83610b5f565b9250828210156112e1576112e0611289565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061135582610b5f565b915061136083610b5f565b9250826113705761136f61131b565b5b828206905092915050565b600081905092915050565b50565b600061139660008361137b565b91506113a182611386565b600082019050919050565b60006113b782611389565b915081905091905056fea2646970667358221220d5c3018d20e355e6e7fbbd120f1b44f1ffdc16418f5b3b84450fdb70352d473a64736f6c63430008080033",
  "devdoc": {
    "author": "Kalio753",
    "details": "Implement Chainlink VRF & Chainlink Keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is fuction of Chainlink Keeper to check when to reload scripts When to update : 1. It's time (check time pass if greater than interval passed in) 2. Have at least 1 player & some ETH in the Lottery 3. Subscription should have some LINK (The service online) 4. The state of lotter should be 'open'"
      }
    },
    "title": "Auto Random Raffle Smart Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract create a automatic random decetralized lottery for players to join",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1162,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1164,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1167,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)1157"
      },
      {
        "astId": 1169,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)1157": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}